@model WP.DTOs.CreateUserDto
@{

    ViewBag.Title = "Add New User";
    ViewBag.SubTitle = "Create a brand new user and add them to this site.";
}

<form action="@Url.Action("AddUser")" class="form label wp_form" method="post">
    @Html.AntiForgeryToken()
    @*  @Html.ValidationSummary() *@
    <ul>
        <li>
            @Html.LabelFor(m => m.UserLogin)
            <div class="form-content">
                @Html.TextBoxFor(m => m.UserLogin)
                @Html.ValidationMessageFor(x => x.UserLogin)
            </div>
        </li>

        <li>
            @Html.LabelFor(m => m.UserEmail)
            <div class="form-content">
                @Html.TextBoxFor(m => m.UserEmail)
                @Html.ValidationMessageFor(x => x.UserEmail)
            </div>
        </li>
        <li>
            @Html.LabelFor(m => m.FirstName)
            <div class="form-content">
                @Html.TextBoxFor(m => m.FirstName)
                @Html.ValidationMessageFor(x => x.FirstName)
            </div>
        </li>
        <li>
            @Html.LabelFor(m => m.LastName)
            <div class="form-content">
                @Html.TextBoxFor(m => m.LastName)
                @Html.ValidationMessageFor(x => x.LastName)
            </div>
        </li>
        <li>
            @Html.LabelFor(m => m.UserUrl)
            <div class="form-content">
                @Html.TextBoxFor(m => m.UserUrl)
                @Html.ValidationMessageFor(x => x.UserUrl)
            </div>
        </li>
        <li>
            @Html.LabelFor(m => m.UserPass)
            <div class="form-content d-flex">
                <button id="generate_pass" type="button" onclick="generatePass()" class="btn btn-primary">Generate Password</button>
                <br />
                @Html.TextBoxFor(m => m.UserPass, new { @onkeyup = "generateStrength()" })
                <button type="button" class="btn" id="togglePassword">
                    <i class="mdi mdi-eye"></i>
                </button>
                <label class="pass_strength" id="pass_strength"></label>
                @Html.ValidationMessageFor(x => x.UserPass)
            </div>
        </li>
        <li>
            @Html.LabelFor(m => m.SendUserNotification)
            <div class="form-content">

                <label>Send the new user and email about their account</label>
                @Html.CheckBoxFor(m => m.SendUserNotification)
                @Html.ValidationMessageFor(x => x.SendUserNotification)
            </div>
        </li>
        <li>
            @Html.LabelFor(m => m.Role)
            <div class="form-content">
                @Html.DropDownListFor(m => m.Role, (IEnumerable<SelectListItem>)ViewBag.Roles)
                @Html.ValidationMessageFor(x => x.Role)
            </div>
        </li>
        <li class="submit">
            <button type="submit" class="button insert-media add_media">Add New User</button>
        </li>
    </ul>
</form>
@section Styles {
    <link href="~/assets/css/wp_form.css" rel="stylesheet" />
}

@section Scripts {
    <script>
        $("#togglePassword").click(function () {
            if ($('i', this).hasClass('mdi-eye-check')) {
                $('i', this).removeClass('mdi mdi-eye-check')
                    .addClass('mdi mdi-eye');
            }
            else {
                $('i', this).removeClass('mdi mdi-eye')
                    .addClass('mdi mdi-eye-check');
            }


            let passwordField = $("#UserPass");
            let type = passwordField.attr("type") === "password" ? "text" : "password";
            passwordField.attr("type", type);
        });
        function generatePass() {
            let targetelmid = $("#UserPass");
            const uppercase = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            const lowercase = "abcdefghijklmnopqrstuvwxyz";
            const numbers = "0123456789";
            const specialChars = "!@@#$%^&*";

            const allChars = uppercase + lowercase + numbers + specialChars;
            let password = "";
            // Ensure at least one character from each required set
            password += uppercase[Math.floor(Math.random() * uppercase.length)];
            password += lowercase[Math.floor(Math.random() * lowercase.length)];
            password += numbers[Math.floor(Math.random() * numbers.length)];
            password += specialChars[Math.floor(Math.random() * specialChars.length)];

            // Fill remaining characters randomly
            for (let i = 4; i < 16; i++) {
                password += allChars[Math.floor(Math.random() * allChars.length)];
            }

            // Shuffle password for randomness
            $(targetelmid).val(password.split('').sort(() => 0.5 - Math.random()).join(''));
            generateStrength()

        }
        function generateStrength() {
            let password = $("#UserPass").val();
            let targetelmid = $("#pass_strength");
            let strength = 0;
            if (password.length >= 8) strength++;
            if (/[a-z]/.test(password)) strength++;
            if (/[A-Z]/.test(password)) strength++;
            if (/\d/.test(password)) strength++;
            if (/[!@@#$%^&*]/.test(password)) strength++;
            var response = '';


            if (strength === 5) response = "Strong";
            else if (strength >= 3) response = "Medium";
            else response = "Weak";

            targetelmid.text(response);
            targetelmid.removeAttr('class').addClass(response.toLowerCase())
        }

        generatePass();
    </script>
}